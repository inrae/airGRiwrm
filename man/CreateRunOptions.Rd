% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CreateRunOptions.GRiwrmInputsModel.R,
%   R/CreateRunOptions.InputsModel.R, R/CreateRunOptions.R
\name{CreateRunOptions.GRiwrmInputsModel}
\alias{CreateRunOptions.GRiwrmInputsModel}
\alias{CreateRunOptions.InputsModel}
\alias{CreateRunOptions}
\title{Creation of the CalibOptions object}
\usage{
\method{CreateRunOptions}{GRiwrmInputsModel}(InputsModel, ...)

\method{CreateRunOptions}{InputsModel}(InputsModel, ...)

CreateRunOptions(InputsModel, ...)
}
\arguments{
\item{InputsModel}{object of class \emph{InputsModel} or \emph{GRiwrmInputsModel}. See \link{CreateInputsModel} for details}

\item{...}{arguments passed to \link[airGR:CreateRunOptions]{airGR::CreateRunOptions}, see details}
}
\value{
Depending on the class of \code{InputsModel} argument (respectively \code{InputsModel} and \code{GRiwrmInputsModel} object), the returned value is respectively:
\itemize{
\item a \code{RunOptions} object (See \link[airGR:CreateRunOptions]{airGR::CreateRunOptions})
\item a \code{GRiwrmRunOptions} object which is a \link{list} of \code{RunOptions} object with one item per modelled sub-catchment
}
}
\description{
This function can be used either for a catchment (with an \emph{InputsModel} object) or for a network (with a \emph{GRiwrmInputsModel} object)
}
\details{
See \link[airGR:CreateRunOptions]{airGR::CreateRunOptions} documentation for a complete list of arguments.

With a \emph{GRiwrmInputsModel} object, all arguments are applied on each sub-catchments of the network.
}
\examples{
#################################################################
# Run the `airGRRunModel_Lag` example in the GRiwrm fashion way #
#################################################################

# Run the airGR RunModel_Lag example for harvesting necessary data
library(airGR)
example(RunModel_Lag)
# detach the package because otherwise airGR overwrites the airGRiwrm functions
detach("package:airGR")

# This example is a network of 2 nodes which can be describe like this:
db <- data.frame(id = c("Reservoir", "GaugingDown"),
                 length = c(LengthHydro, NA),
                 down = c("GaugingDown", NA),
                 area = c(NA, BasinInfo$BasinArea),
                 model = c(NA, "RunModel_GR4J"),
                 stringsAsFactors = FALSE)

# Create GRiwrm object from the data.frame
griwrm <- CreateGRiwrm(db)
str(griwrm)

# Formatting observations for the hydrological models
# Each input data should be a matrix or a data.frame with the good id in the name of the column
Precip <- matrix(BasinObs$P, ncol = 1)
colnames(Precip) <- "GaugingDown"
PotEvap <- matrix(BasinObs$E, ncol = 1)
colnames(PotEvap) <- "GaugingDown"

# Observed flows are integrated now because we mix:
#  - flows that are directly injected in the model
#  - flows that could be used for the calibration of the hydrological models
Qobs = matrix(c(Qupstream, BasinObs$Qmm), ncol = 2)
colnames(Qobs) <- griwrm$id
str(Qobs)

# Creation of the GRiwrmInputsModel object (= a named list of InputsModel objects)
InputsModels <- CreateInputsModel(griwrm,
                            DatesR = BasinObs$DatesR,
                            Precip = Precip,
                            PotEvap = PotEvap,
                            Qobs = Qobs)
str(InputsModels)

# Creation of the GriwmRunOptions object
RunOptions2 <- CreateRunOptions(InputsModels,
                                IndPeriod_Run = Ind_Run)
str(RunOptions2)

# Parameters of the SD models should be encapsulated in a named list
Param2 <- list(`GaugingDown` = c(Velocity, Param))

# RunModel for the whole network
OutputsModels <- RunModel(InputsModels,
                          RunOptions = RunOptions2,
                          Param = Param2)
str(OutputsModels)

# Comparison between GRiwrm simulation and airGR simulation
plot(OutputsModels, Qobs = data.frame(`GaugingDown` = OutputsModel$Qsim))
}
